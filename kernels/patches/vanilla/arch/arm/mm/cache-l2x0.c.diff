--- ./vanilla//arch/arm/mm/cache-l2x0.c	2010-02-23 17:38:51.000000000 +0200
+++ ./default//arch/arm/mm/cache-l2x0.c	2012-05-23 10:43:54.072935667 +0300
@@ -2,6 +2,7 @@
  * arch/arm/mm/cache-l2x0.c - L210/L220 cache controller support
  *
  * Copyright (C) 2007 ARM Limited
+ * Copyright (c) 2009, Code Aurora Forum. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -26,6 +27,7 @@
 #define CACHE_LINE_SIZE		32
 
 static void __iomem *l2x0_base;
+static uint32_t aux_ctrl_save;
 static DEFINE_SPINLOCK(l2x0_lock);
 
 static inline void sync_writel(unsigned long val, unsigned long reg,
@@ -46,6 +48,11 @@
 	sync_writel(0, L2X0_CACHE_SYNC, 1);
 }
 
+void l2x0_cache_sync(void)
+{
+	cache_sync();
+}
+
 static inline void l2x0_inv_all(void)
 {
 	/* invalidate all ways */
@@ -53,6 +60,13 @@
 	cache_sync();
 }
 
+static inline void l2x0_flush_all(void)
+{
+	/* clean and invalidate all ways */
+	sync_writel(0xff, L2X0_CLEAN_INV_WAY, 0xff);
+	cache_sync();
+}
+
 static void l2x0_inv_range(unsigned long start, unsigned long end)
 {
 	unsigned long addr;
@@ -73,6 +87,25 @@
 	cache_sync();
 }
 
+static void l2x0_inv_range_atomic(unsigned long start, unsigned long end)
+{
+	unsigned long addr;
+
+	if (start & (CACHE_LINE_SIZE - 1)) {
+		start &= ~(CACHE_LINE_SIZE - 1);
+		writel(start, l2x0_base + L2X0_CLEAN_INV_LINE_PA);
+		start += CACHE_LINE_SIZE;
+	}
+
+	if (end & (CACHE_LINE_SIZE - 1)) {
+		end &= ~(CACHE_LINE_SIZE - 1);
+		writel(end, l2x0_base + L2X0_CLEAN_INV_LINE_PA);
+	}
+
+	for (addr = start; addr < end; addr += CACHE_LINE_SIZE)
+		writel(addr, l2x0_base + L2X0_INV_LINE_PA);
+}
+
 static void l2x0_clean_range(unsigned long start, unsigned long end)
 {
 	unsigned long addr;
@@ -83,6 +116,15 @@
 	cache_sync();
 }
 
+static void l2x0_clean_range_atomic(unsigned long start, unsigned long end)
+{
+	unsigned long addr;
+
+	start &= ~(CACHE_LINE_SIZE - 1);
+	for (addr = start; addr < end; addr += CACHE_LINE_SIZE)
+		writel(addr, l2x0_base + L2X0_CLEAN_LINE_PA);
+}
+
 static void l2x0_flush_range(unsigned long start, unsigned long end)
 {
 	unsigned long addr;
@@ -93,28 +135,82 @@
 	cache_sync();
 }
 
+void l2x0_flush_range_atomic(unsigned long start, unsigned long end)
+{
+	unsigned long addr;
+
+	start &= ~(CACHE_LINE_SIZE - 1);
+	for (addr = start; addr < end; addr += CACHE_LINE_SIZE)
+		writel(addr, l2x0_base + L2X0_CLEAN_INV_LINE_PA);
+}
+
 void __init l2x0_init(void __iomem *base, __u32 aux_val, __u32 aux_mask)
 {
-	__u32 aux;
+	__u32 bits;
 
 	l2x0_base = base;
 
 	/* disable L2X0 */
-	writel(0, l2x0_base + L2X0_CTRL);
-
-	aux = readl(l2x0_base + L2X0_AUX_CTRL);
-	aux &= aux_mask;
-	aux |= aux_val;
-	writel(aux, l2x0_base + L2X0_AUX_CTRL);
+	bits = readl(l2x0_base + L2X0_CTRL);
+	bits &= ~0x01;	/* clear bit 0 */
+	writel(bits, l2x0_base + L2X0_CTRL);
+
+	bits = readl(l2x0_base + L2X0_AUX_CTRL);
+	bits &= aux_mask;
+	bits |= aux_val;
+	writel(bits, l2x0_base + L2X0_AUX_CTRL);
 
 	l2x0_inv_all();
 
 	/* enable L2X0 */
-	writel(1, l2x0_base + L2X0_CTRL);
+	bits = readl(l2x0_base + L2X0_CTRL);
+	bits |= 0x01;	/* set bit 0 */
+	writel(bits, l2x0_base + L2X0_CTRL);
+
+	bits = readl(l2x0_base + L2X0_CACHE_ID);
+	bits >>= 6;	/* part no, bit 6 to 9 */
+	bits &= 0x0f;	/* 4 bits */
+
+	if (bits == 2) {	/* L220 */
+		outer_cache.inv_range = l2x0_inv_range;
+		outer_cache.clean_range = l2x0_clean_range;
+		outer_cache.flush_range = l2x0_flush_range;
+		printk(KERN_INFO "L220 cache controller enabled\n");
+	} else {		/* L210 */
+		outer_cache.inv_range = l2x0_inv_range_atomic;
+		outer_cache.clean_range = l2x0_clean_range_atomic;
+		outer_cache.flush_range = l2x0_flush_range_atomic;
+		printk(KERN_INFO "L210 cache controller enabled\n");
+	}
+
+}
 
-	outer_cache.inv_range = l2x0_inv_range;
-	outer_cache.clean_range = l2x0_clean_range;
-	outer_cache.flush_range = l2x0_flush_range;
+void l2x0_suspend(void)
+{
+	/* Save aux control register value */
+	aux_ctrl_save = readl(l2x0_base + L2X0_AUX_CTRL);
+	/* Flush all cache */
+	l2x0_flush_all();
+	/* Disable the cache */
+	writel(0, l2x0_base + L2X0_CTRL);
+
+	/* Memory barrier */
+	dmb();
+}
 
-	printk(KERN_INFO "L2X0 cache controller enabled\n");
+void l2x0_resume(int collapsed)
+{
+	if (collapsed) {
+		/* Disable the cache */
+		writel(0, l2x0_base + L2X0_CTRL);
+
+		/* Restore aux control register value */
+		writel(aux_ctrl_save, l2x0_base + L2X0_AUX_CTRL);
+
+		/* Invalidate the cache */
+		l2x0_inv_all();
+	}
+
+	/* Enable the cache */
+	writel(1, l2x0_base + L2X0_CTRL);
 }
