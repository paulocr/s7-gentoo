--- ./vanilla//arch/arm/oprofile/op_model_v7.c	2010-02-23 17:38:51.000000000 +0200
+++ ./default//arch/arm/oprofile/op_model_v7.c	2012-05-23 10:43:54.081935667 +0300
@@ -2,6 +2,7 @@
  * op_model_v7.c
  * ARM V7 (Cortex A8) Event Monitor Driver
  *
+ * Copyright (c) 2009-2010, Code Aurora Forum. All rights reserved.
  * Copyright 2008 Jean Pihet <jpihet@mvista.com>
  * Copyright 2004 ARM SMP Development Team
  *
@@ -21,12 +22,121 @@
 #include "op_model_v7.h"
 
 /* #define DEBUG */
-
+#if defined(CONFIG_ARCH_QSD8X50) || defined(CONFIG_ARCH_MSM7X30)
+#define MAX_EVT 63
 
 /*
  * ARM V7 PMNC support
  */
 
+struct scorp_evt {
+	u32 evt_type;
+	u32 val;
+	u8 grp;
+	u32 evt_type_act;
+};
+
+static const struct scorp_evt sc_evt[] = {
+	{0x4c, 0x80000500, 0, 0x4d},
+	{0x4d, 0x86000000, 0, 0x4f},
+	{0x4e, 0x87000000, 0, 0x4f},
+	{0x4f, 0x80080000, 0, 0x4e},
+	{0x50, 0x8000000a, 0, 0x4c},
+	{0x51, 0x80000a00, 0, 0x4d},
+	{0x52, 0x800a0000, 0, 0x4e},
+	{0x53, 0x8a000000, 0, 0x4f},
+	{0x54, 0x8000000b, 0, 0x4c},
+	{0x55, 0x80000b00, 0, 0x4d},
+	{0x56, 0x800b0000, 0, 0x4e},
+	{0x57, 0x8b000000, 0, 0x4f},
+	{0x58, 0x8000000c, 0, 0x4c},
+	{0x59, 0x80000c00, 0, 0x4d},
+	{0x5a, 0x8000000d, 0, 0x4c},
+	{0x5b, 0x80000d00, 0, 0x4d},
+	{0x5c, 0x800d0000, 0, 0x4e},
+	{0x5d, 0x8d000000, 0, 0x4f},
+
+	{0x5e, 0x80000600, 1, 0x51},
+	{0x5f, 0x80060000, 1, 0x52},
+	{0x60, 0x86000000, 1, 0x53},
+	{0x61, 0x89000000, 1, 0x53},
+	{0x62, 0x8000000d, 1, 0x50},
+	{0x63, 0x800d0000, 1, 0x52},
+	{0x64, 0x8d000000, 1, 0x53},
+	{0x65, 0x8000000e, 1, 0x50},
+	{0x66, 0x80000e00, 1, 0x51},
+	{0x67, 0x800e0000, 1, 0x52},
+	{0x68, 0x8e000000, 1, 0x53},
+
+	{0x69, 0x80000001, 2, 0x54},
+	{0x6a, 0x80000100, 2, 0x55},
+	{0x6b, 0x80020000, 2, 0x56},
+	{0x6c, 0x82000000, 2, 0x57},
+	{0x6d, 0x80000003, 2, 0x54},
+	{0x6e, 0x80000300, 2, 0x55},
+	{0x6f, 0x80030000, 2, 0x56},
+	{0x70, 0x83000000, 2, 0x57},
+	{0x71, 0x80000400, 2, 0x55},
+	{0x72, 0x80040000, 2, 0x56},
+	{0x73, 0x84000000, 2, 0x57},
+	{0x74, 0x80000800, 2, 0x55},
+	{0x75, 0x88000000, 2, 0x57},
+	{0x76, 0x80000900, 2, 0x55},
+	{0x77, 0x80090000, 2, 0x56},
+	{0x78, 0x89000000, 2, 0x57},
+
+	{0x79, 0x80000001, 3, 0x58},
+	{0x7a, 0x80000100, 3, 0x59},
+	{0x7b, 0x80010000, 3, 0x5a},
+	{0x7c, 0x81000000, 3, 0x5b},
+	{0x7d, 0x80000002, 3, 0x58},
+	{0x7e, 0x80000200, 3, 0x59},
+	{0x7f, 0x80020000, 3, 0x5a},
+	{0x80, 0x82000000, 3, 0x5b},
+	{0x81, 0x80000003, 3, 0x58},
+	{0x82, 0x80000300, 3, 0x59},
+	{0x83, 0x80030000, 3, 0x5a},
+	{0x84, 0x83000000, 3, 0x5b},
+	{0x85, 0x80000009, 3, 0x58},
+	{0x86, 0x80090000, 3, 0x5a},
+	{0x87, 0x8000000a, 3, 0x58},
+	{0x88, 0x8000000c, 3, 0x58},
+	{0x89, 0x80000c00, 3, 0x59},
+	{0x8a, 0x800c0000, 3, 0x5a},
+	{0x8b, 0x8c000000, 3, 0x5b}
+};
+
+unsigned int get_evt_code(unsigned int evt_type)
+{
+	u32 i;
+	for (i = 0; i < MAX_EVT; i++) {
+		if (sc_evt[i].evt_type == evt_type)
+			return sc_evt[i].val;
+	}
+	return 0;
+}
+
+unsigned int get_evt_type_act(unsigned int evt_type)
+{
+	u32 i;
+	for (i = 0; i < MAX_EVT; i++) {
+		if (sc_evt[i].evt_type == evt_type)
+			return sc_evt[i].evt_type_act;
+	}
+	return 0;
+}
+
+unsigned int get_evt_grp(unsigned int evt_type)
+{
+	u32 i;
+	for (i = 0; i < MAX_EVT; i++) {
+		if (sc_evt[i].evt_type == evt_type)
+			return sc_evt[i].grp;
+	}
+	return 5;
+}
+#endif
+
 static u32 cnt_en[CNTMAX];
 
 static inline void armv7_pmnc_write(u32 val)
@@ -184,6 +294,17 @@
 int armv7_setup_pmnc(void)
 {
 	unsigned int cnt;
+#if defined(CONFIG_ARCH_QSD8X50) || defined(CONFIG_ARCH_MSM7X30)
+	u32 val = 0;
+	u32 gr;
+	u32 lpm2val, lpm0val;
+	u32 lpm1val, l2pmval;
+
+	lpm2val = 0;
+	lpm0val = 0;
+	lpm1val = 0;
+	l2pmval = 0;
+#endif
 
 	if (armv7_pmnc_read() & PMNC_E) {
 		printk(KERN_ERR "oprofile: CPU%u PMNC still enabled when setup"
@@ -192,11 +313,9 @@
 	}
 
 	/*
-	 * Initialize & Reset PMNC: C bit, D bit and P bit.
-	 *  Note: Using a slower count for CCNT (D bit: divide by 64) results
-	 *   in a more stable system
+	 * Initialize & Reset PMNC: C bit and P bit.
 	 */
-	armv7_pmnc_write(PMNC_P | PMNC_C | PMNC_D);
+	armv7_pmnc_write(PMNC_P | PMNC_C);
 
 
 	for (cnt = CCNT; cnt < CNTMAX; cnt++) {
@@ -213,6 +332,10 @@
 			continue;
 
 		event = counter_config[cpu_cnt].event & 255;
+#if defined(CONFIG_ARCH_QSD8X50) || defined(CONFIG_ARCH_MSM7X30)
+		if (event >= 0x40)
+			event = get_evt_type_act(event);
+#endif
 
 		/*
 		 * Set event (if destined for PMNx counters)
@@ -221,6 +344,42 @@
 		if (cnt != CCNT)
 			armv7_pmnc_write_evtsel(cnt, event);
 
+#if defined(CONFIG_ARCH_QSD8X50)  || defined(CONFIG_ARCH_MSM7X30)
+		if (event >= 0x40) {
+			val = 0x0;
+			asm volatile("mcr p15, 0, %0, c9, c15, 0" : :
+						"r" (val));
+			val = get_evt_code(counter_config[cpu_cnt].event & 255);
+			gr = get_evt_grp(counter_config[cpu_cnt].event & 255);
+			switch (gr) {
+			case 0:
+				lpm0val = lpm0val | val;
+				val = lpm0val;
+				asm volatile("mcr p15, 0, %0, c15, c0, 0" : :
+						"r" (val));
+				break;
+			case 1:
+				lpm1val = lpm1val | val;
+				val = lpm1val;
+				asm volatile("mcr p15, 1, %0, c15, c0, 0" : :
+						"r" (val));
+				break;
+			case 2:
+				lpm2val = lpm2val | val;
+				val = lpm2val;
+				asm volatile("mcr p15, 2, %0, c15, c0, 0" : :
+						"r" (val));
+				break;
+			case 3:
+				l2pmval = l2pmval | val;
+				val = l2pmval;
+				asm volatile("mcr p15, 3, %0, c15, c2, 0" : :
+						"r" (val));
+				break;
+
+			}
+		}
+#endif
 		/*
 		 * Enable interrupt for this counter
 		 */
@@ -371,6 +530,12 @@
 #ifdef CONFIG_ARCH_OMAP3
 	INT_34XX_BENCH_MPU_EMUL,
 #endif
+#ifdef CONFIG_ARCH_QSD8X50
+	INT_ARM11_PM,
+#endif
+#ifdef CONFIG_ARCH_MSM7X30
+	INT_ARM11_PM,
+#endif
 };
 
 static void armv7_pmnc_stop(void)
