--- ./vanilla//kernel/pm_qos_params.c	2010-02-23 17:38:51.000000000 +0200
+++ ./default//kernel/pm_qos_params.c	2012-05-23 10:44:04.730935191 +0300
@@ -25,6 +25,8 @@
  * pointer or exits the pm_qos_object will get an opportunity to clean up.
  *
  * Mark Gross <mgross@linux.intel.com>
+ *
+ * Copyright (c) 2009-2010, Code Aurora Forum. All rights reserved.
  */
 
 #include <linux/pm_qos_params.h>
@@ -34,6 +36,8 @@
 #include <linux/slab.h>
 #include <linux/time.h>
 #include <linux/fs.h>
+#include <linux/debugfs.h>
+#include <linux/seq_file.h>
 #include <linux/device.h>
 #include <linux/miscdevice.h>
 #include <linux/string.h>
@@ -47,30 +51,15 @@
  * or pm_qos_object list and pm_qos_objects need to happen with pm_qos_lock
  * held, taken with _irqsave.  One lock to rule them all
  */
-struct requirement_list {
-	struct list_head list;
-	union {
-		s32 value;
-		s32 usec;
-		s32 kbps;
-	};
-	char *name;
-};
 
 static s32 max_compare(s32 v1, s32 v2);
 static s32 min_compare(s32 v1, s32 v2);
 
-struct pm_qos_object {
-	struct requirement_list requirements;
-	struct blocking_notifier_head *notifiers;
-	struct miscdevice pm_qos_power_miscdev;
-	char *name;
-	s32 default_value;
-	atomic_t target_value;
-	s32 (*comparitor)(s32, s32);
+struct pm_qos_power_user {
+	int pm_qos_class;
+	char name[sizeof("user_01234567")];
 };
 
-static struct pm_qos_object null_pm_qos;
 static BLOCKING_NOTIFIER_HEAD(cpu_dma_lat_notifier);
 static struct pm_qos_object cpu_dma_pm_qos = {
 	.requirements = {LIST_HEAD_INIT(cpu_dma_pm_qos.requirements.list)},
@@ -103,15 +92,28 @@
 	.comparitor = max_compare
 };
 
+static BLOCKING_NOTIFIER_HEAD(system_bus_freq_notifier);
+static struct pm_qos_object system_bus_freq_pm_qos = {
+	.requirements =
+		{LIST_HEAD_INIT(system_bus_freq_pm_qos.requirements.list)},
+	.notifiers = &system_bus_freq_notifier,
+	.name = "system_bus_freq",
+	.default_value = 0,
+	.target_value = ATOMIC_INIT(0),
+	.comparitor = max_compare
+};
+
 
-static struct pm_qos_object *pm_qos_array[] = {
-	&null_pm_qos,
-	&cpu_dma_pm_qos,
-	&network_lat_pm_qos,
-	&network_throughput_pm_qos
+static struct pm_qos_object *pm_qos_array[PM_QOS_NUM_CLASSES] = {
+	[PM_QOS_RESERVED] = NULL,
+	[PM_QOS_CPU_DMA_LATENCY] = &cpu_dma_pm_qos,
+	[PM_QOS_NETWORK_LATENCY] = &network_lat_pm_qos,
+	[PM_QOS_NETWORK_THROUGHPUT] = &network_throughput_pm_qos,
+	[PM_QOS_SYSTEM_BUS_FREQ] = &system_bus_freq_pm_qos,
 };
 
 static DEFINE_SPINLOCK(pm_qos_lock);
+static atomic_t pm_qos_user_id = ATOMIC_INIT(0);
 
 static ssize_t pm_qos_power_write(struct file *filp, const char __user *buf,
 		size_t count, loff_t *f_pos);
@@ -135,8 +137,22 @@
 	return min(v1, v2);
 }
 
+int pm_qos_register_plugin(int pm_qos_class, struct pm_qos_plugin *plugin)
+{
+	if (pm_qos_class >= PM_QOS_NUM_CLASSES)
+		return -EINVAL;
+
+	/* Plugins should not be changed once registered. */
+	if (pm_qos_array[pm_qos_class]->plugin)
+		return -EPERM;
 
-static void update_target(int target)
+	pm_qos_array[pm_qos_class]->plugin = plugin;
+
+	return 0;
+}
+
+static int pm_qos_update_target(struct pm_qos_object *class, char *request_name,
+				s32 value, void **request_data)
 {
 	s32 extreme_value;
 	struct requirement_list *node;
@@ -144,25 +160,31 @@
 	int call_notifier = 0;
 
 	spin_lock_irqsave(&pm_qos_lock, flags);
-	extreme_value = pm_qos_array[target]->default_value;
-	list_for_each_entry(node,
-			&pm_qos_array[target]->requirements.list, list) {
-		extreme_value = pm_qos_array[target]->comparitor(
-				extreme_value, node->value);
-	}
-	if (atomic_read(&pm_qos_array[target]->target_value) != extreme_value) {
+	extreme_value = class->default_value;
+	list_for_each_entry(node, &class->requirements.list, list)
+		extreme_value = class->comparitor(extreme_value, node->value);
+
+	if (atomic_read(&class->target_value) != extreme_value) {
 		call_notifier = 1;
-		atomic_set(&pm_qos_array[target]->target_value, extreme_value);
-		pr_debug(KERN_ERR "new target for qos %d is %d\n", target,
-			atomic_read(&pm_qos_array[target]->target_value));
+		atomic_set(&class->target_value, extreme_value);
+		pr_debug(KERN_ERR "new target for qos %s is %d\n",
+			class->name, atomic_read(&class->target_value));
 	}
 	spin_unlock_irqrestore(&pm_qos_lock, flags);
 
 	if (call_notifier)
-		blocking_notifier_call_chain(pm_qos_array[target]->notifiers,
+		blocking_notifier_call_chain(class->notifiers,
 			(unsigned long) extreme_value, NULL);
+
+	return 0;
 }
 
+static struct pm_qos_plugin pm_qos_default_plugin = {
+	.add_fn = pm_qos_update_target,
+	.update_fn = pm_qos_update_target,
+	.remove_fn = pm_qos_update_target,
+};
+
 static int register_pm_qos_misc(struct pm_qos_object *qos)
 {
 	qos->pm_qos_power_miscdev.minor = MISC_DYNAMIC_MINOR;
@@ -178,6 +200,8 @@
 
 	for (pm_qos_class = 0;
 		pm_qos_class < PM_QOS_NUM_CLASSES; pm_qos_class++) {
+		if (!pm_qos_array[pm_qos_class])
+			continue;
 		if (minor ==
 			pm_qos_array[pm_qos_class]->pm_qos_power_miscdev.minor)
 			return pm_qos_class;
@@ -210,30 +234,46 @@
 int pm_qos_add_requirement(int pm_qos_class, char *name, s32 value)
 {
 	struct requirement_list *dep;
+	struct pm_qos_object *class = pm_qos_array[pm_qos_class];
 	unsigned long flags;
+	int rc = 0;
 
 	dep = kzalloc(sizeof(struct requirement_list), GFP_KERNEL);
-	if (dep) {
-		if (value == PM_QOS_DEFAULT_VALUE)
-			dep->value = pm_qos_array[pm_qos_class]->default_value;
-		else
-			dep->value = value;
-		dep->name = kstrdup(name, GFP_KERNEL);
-		if (!dep->name)
-			goto cleanup;
-
-		spin_lock_irqsave(&pm_qos_lock, flags);
-		list_add(&dep->list,
-			&pm_qos_array[pm_qos_class]->requirements.list);
-		spin_unlock_irqrestore(&pm_qos_lock, flags);
-		update_target(pm_qos_class);
+	if (!dep) {
+		rc = -ENOMEM;
+		goto err_dep_alloc_failed;
+	}
 
-		return 0;
+	if (value == PM_QOS_DEFAULT_VALUE)
+		dep->value = class->default_value;
+	else
+		dep->value = value;
+	dep->name = kstrdup(name, GFP_KERNEL);
+	if (!dep->name) {
+		rc = -ENOMEM;
+		goto err_name_alloc_failed;
 	}
 
-cleanup:
+	/* Use default plugin if none specified. */
+	if (!class->plugin)
+		class->plugin = &pm_qos_default_plugin;
+
+	spin_lock_irqsave(&pm_qos_lock, flags);
+	list_add(&dep->list, &class->requirements.list);
+	spin_unlock_irqrestore(&pm_qos_lock, flags);
+
+	rc = class->plugin->add_fn(class, name, dep->value, &dep->data);
+	if (rc)
+		goto err_add_fn_failed;
+
+	return rc;
+
+err_add_fn_failed:
+	kfree(dep->name);
+err_name_alloc_failed:
 	kfree(dep);
-	return -ENOMEM;
+err_dep_alloc_failed:
+	return rc;
 }
 EXPORT_SYMBOL_GPL(pm_qos_add_requirement);
 
@@ -250,17 +290,18 @@
  */
 int pm_qos_update_requirement(int pm_qos_class, char *name, s32 new_value)
 {
+	struct pm_qos_object *class = pm_qos_array[pm_qos_class];
 	unsigned long flags;
 	struct requirement_list *node;
 	int pending_update = 0;
+	int rc = 0;
 
 	spin_lock_irqsave(&pm_qos_lock, flags);
 	list_for_each_entry(node,
-		&pm_qos_array[pm_qos_class]->requirements.list, list) {
+		&class->requirements.list, list) {
 		if (strcmp(node->name, name) == 0) {
 			if (new_value == PM_QOS_DEFAULT_VALUE)
-				node->value =
-				pm_qos_array[pm_qos_class]->default_value;
+				node->value = class->default_value;
 			else
 				node->value = new_value;
 			pending_update = 1;
@@ -268,10 +309,12 @@
 		}
 	}
 	spin_unlock_irqrestore(&pm_qos_lock, flags);
-	if (pending_update)
-		update_target(pm_qos_class);
 
-	return 0;
+	if (pending_update && class->plugin)
+		rc = class->plugin->update_fn(class, name,
+			node->value, &node->data);
+
+	return rc;
 }
 EXPORT_SYMBOL_GPL(pm_qos_update_requirement);
 
@@ -286,13 +329,16 @@
 void pm_qos_remove_requirement(int pm_qos_class, char *name)
 {
 	unsigned long flags;
+	struct pm_qos_object *class = pm_qos_array[pm_qos_class];
 	struct requirement_list *node;
 	int pending_update = 0;
+	void *node_data = NULL;
 
 	spin_lock_irqsave(&pm_qos_lock, flags);
 	list_for_each_entry(node,
-		&pm_qos_array[pm_qos_class]->requirements.list, list) {
+		&class->requirements.list, list) {
 		if (strcmp(node->name, name) == 0) {
+			node_data = node->data;
 			kfree(node->name);
 			list_del(&node->list);
 			kfree(node);
@@ -301,8 +347,10 @@
 		}
 	}
 	spin_unlock_irqrestore(&pm_qos_lock, flags);
-	if (pending_update)
-		update_target(pm_qos_class);
+
+	if (pending_update && class->plugin->remove_fn)
+		class->plugin->remove_fn(class, name,
+			class->default_value, &node_data);
 }
 EXPORT_SYMBOL_GPL(pm_qos_remove_requirement);
 
@@ -314,7 +362,7 @@
  * will register the notifier into a notification chain that gets called
  * upon changes to the pm_qos_class target value.
  */
- int pm_qos_add_notifier(int pm_qos_class, struct notifier_block *notifier)
+int pm_qos_add_notifier(int pm_qos_class, struct notifier_block *notifier)
 {
 	int retval;
 
@@ -344,56 +392,69 @@
 }
 EXPORT_SYMBOL_GPL(pm_qos_remove_notifier);
 
-#define PID_NAME_LEN sizeof("process_1234567890")
-static char name[PID_NAME_LEN];
 
 static int pm_qos_power_open(struct inode *inode, struct file *filp)
 {
 	int ret;
-	long pm_qos_class;
+	int pm_qos_class;
+	struct pm_qos_power_user *usr;
+
+	usr = kzalloc(sizeof(struct pm_qos_power_user), GFP_KERNEL);
+	if (!usr)
+		return -ENOMEM;
 
 	lock_kernel();
 	pm_qos_class = find_pm_qos_object_by_minor(iminor(inode));
-	if (pm_qos_class >= 0) {
-		filp->private_data = (void *)pm_qos_class;
-		sprintf(name, "process_%d", current->pid);
-		ret = pm_qos_add_requirement(pm_qos_class, name,
-					PM_QOS_DEFAULT_VALUE);
-		if (ret >= 0) {
-			unlock_kernel();
-			return 0;
-		}
+	if (pm_qos_class < 0) {
+		unlock_kernel();
+		kfree(usr);
+		return -EPERM;
 	}
+
+	usr->pm_qos_class = pm_qos_class;
+	snprintf(usr->name, sizeof(usr->name),
+		"user_%08x", (unsigned)atomic_inc_return(&pm_qos_user_id));
+
+	ret = pm_qos_add_requirement(usr->pm_qos_class, usr->name,
+			PM_QOS_DEFAULT_VALUE);
 	unlock_kernel();
 
-	return -EPERM;
+	if (ret < 0) {
+		kfree(usr);
+		return ret;
+	}
+
+	filp->private_data = usr;
+	return 0;
 }
 
 static int pm_qos_power_release(struct inode *inode, struct file *filp)
 {
-	int pm_qos_class;
+	struct pm_qos_power_user *usr;
 
-	pm_qos_class = (long)filp->private_data;
-	sprintf(name, "process_%d", current->pid);
-	pm_qos_remove_requirement(pm_qos_class, name);
+	usr = (struct pm_qos_power_user *)filp->private_data;
+	pm_qos_remove_requirement(usr->pm_qos_class, usr->name);
 
+	filp->private_data = NULL;
+	kfree(usr);
 	return 0;
 }
 
 static ssize_t pm_qos_power_write(struct file *filp, const char __user *buf,
 		size_t count, loff_t *f_pos)
 {
+	struct pm_qos_power_user *usr;
 	s32 value;
-	int pm_qos_class;
 
-	pm_qos_class = (long)filp->private_data;
+	usr = (struct pm_qos_power_user *)filp->private_data;
+
 	if (count != sizeof(s32))
 		return -EINVAL;
-	if (copy_from_user(&value, buf, sizeof(s32)))
+
+	if (get_user(value, (s32 *)buf))
 		return -EFAULT;
-	sprintf(name, "process_%d", current->pid);
-	pm_qos_update_requirement(pm_qos_class, name, value);
 
+	pm_qos_update_requirement(usr->pm_qos_class, usr->name, value);
 	return  sizeof(s32);
 }
 
@@ -413,11 +474,143 @@
 		return ret;
 	}
 	ret = register_pm_qos_misc(&network_throughput_pm_qos);
-	if (ret < 0)
+	if (ret < 0) {
 		printk(KERN_ERR
 			"pm_qos_param: network_throughput setup failed\n");
+		return ret;
+	}
+	ret = register_pm_qos_misc(&system_bus_freq_pm_qos);
+	if (ret < 0)
+		printk(KERN_ERR
+			"pm_qos_param: system_bus_freq setup failed\n");
 
 	return ret;
 }
 
 late_initcall(pm_qos_power_init);
+
+#ifdef CONFIG_DEBUG_FS
+
+#define PM_QOS_CLASS_COUNT ARRAY_SIZE(pm_qos_array)
+
+static struct {
+	int pm_qos_class;
+	struct requirement_list *node;
+	unsigned long flags;
+} pvote;
+
+static void *votes_start(struct seq_file *m, loff_t *pos)
+{
+	struct list_head *head;
+	int n = 0;
+
+	spin_lock_irqsave(&pm_qos_lock, pvote.flags);
+
+	if (*pos < 0)
+		return NULL;
+
+	for (pvote.pm_qos_class = 0
+				; pvote.pm_qos_class < PM_QOS_CLASS_COUNT
+				; pvote.pm_qos_class++) {
+		if (!pm_qos_array[pvote.pm_qos_class])
+			continue;
+		pvote.node = NULL;
+		if (n == *pos)
+			return &pvote;
+		n++;
+		head = &pm_qos_array[pvote.pm_qos_class]->requirements.list;
+		list_for_each_entry(pvote.node, head, list) {
+			if (n == *pos)
+				return &pvote;
+			n++;
+		}
+	}
+
+	return NULL;
+}
+
+static void *votes_next(struct seq_file *m, void *p, loff_t *pos)
+{
+	struct pm_qos_object *class = pm_qos_array[pvote.pm_qos_class];
+
+	(*pos)++;
+
+	if (pvote.node == NULL) {
+		pvote.node = list_prepare_entry(pvote.node,
+					&class->requirements.list, list);
+	}
+	list_for_each_entry_continue(pvote.node,
+					&class->requirements.list, list) {
+		return &pvote;
+	}
+
+	pvote.node = NULL;
+	do {
+		pvote.pm_qos_class++;
+		if (pvote.pm_qos_class >= PM_QOS_CLASS_COUNT)
+			return NULL;
+	} while (!pm_qos_array[pvote.pm_qos_class]);
+
+	return &pvote;
+}
+
+static void votes_stop(struct seq_file *m, void *p)
+{
+	spin_unlock_irqrestore(&pm_qos_lock, pvote.flags);
+}
+
+static int votes_show(struct seq_file *m, void *p)
+{
+	struct pm_qos_object *class = pm_qos_array[pvote.pm_qos_class];
+
+	if (pvote.node) {
+		seq_printf(m, "\t%c %12d %s\n",
+			(pvote.node->value == atomic_read(&class->target_value)
+								? '*' : ' '),
+			pvote.node->value,
+			pvote.node->name);
+	} else {
+		if (pvote.pm_qos_class > 1)
+			seq_printf(m, "\n");
+		seq_printf(m, "%s target(%d) default(%d)\n",
+				class->name,
+				atomic_read(&class->target_value),
+				class->default_value);
+	}
+
+	return 0;
+}
+
+static const struct seq_operations votes_op = {
+	.start	= votes_start,
+	.next	= votes_next,
+	.stop	= votes_stop,
+	.show	= votes_show,
+};
+
+static int votes_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &votes_op);
+}
+
+static const struct file_operations votes_fops = {
+	.open		= votes_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= seq_release,
+};
+
+static __init int pm_qos_init_debugfs(void)
+{
+	struct dentry *entry;
+
+	entry = debugfs_create_file("pm_qos", 0444, NULL, NULL, &votes_fops);
+	if (!entry)
+		pr_warning("pm_qos: Could not create debugfs node 'pm_qos'\n");
+
+	return 0;
+}
+
+late_initcall(pm_qos_init_debugfs);
+
+#endif /* CONFIG_DEBUG_FS */
